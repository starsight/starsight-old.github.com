<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 树莓派 | Starsight]]></title>
  <link href="http://starsight.github.io/blog/categories/shu-mei-pai/atom.xml" rel="self"/>
  <link href="http://starsight.github.io/"/>
  <updated>2016-04-30T19:36:51+08:00</updated>
  <id>http://starsight.github.io/</id>
  <author>
    <name><![CDATA[wenjie]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 3 Opencv+python的人脸识别]]></title>
    <link href="http://starsight.github.io/blog/2016/05/01/raspberry-identify-face/"/>
    <updated>2016-05-01T16:44:58+08:00</updated>
    <id>http://starsight.github.io/blog/2016/05/01/raspberry-identify-face</id>
    <content type="html"><![CDATA[<p>上次安装了opencv库，这次我们来使用一下。</p>

<!--more-->


<p>安装PIL库</p>

<pre><code>sudo pip install pil
</code></pre>

<pre><code class="python  ">xx.py:

#!/usr/bin/env python
#coding=utf-8
import os
from PIL import Image, ImageDraw
import cv

def detect_object(image):
    '''检测图片，获取人脸在图片中的坐标'''
    grayscale = cv.CreateImage((image.width, image.height), 8, 1)
    cv.CvtColor(image, grayscale, cv.CV_BGR2GRAY)

    cascade = cv.Load("/usr/local/opencv-2.4.9/data/haarcascades/haarcascade_frontalface_alt_tree.xml")
    rect = cv.HaarDetectObjects(grayscale, cascade, cv.CreateMemStorage(), 1.1, 2,
        cv.CV_HAAR_DO_CANNY_PRUNING, (20,20))

    result = []
    for r in rect:
        result.append((r[0][0], r[0][1], r[0][0]+r[0][2], r[0][1]+r[0][3]))

    return result

def process(infile):
    '''在原图上框出头像并且截取每个头像到单独文件夹'''
    image = cv.LoadImage(infile);
    if image:
        faces = detect_object(image)

    im = Image.open(infile)
    path = os.path.abspath(infile)
    save_path = os.path.splitext(path)[0]+"_face"
    try:
        os.mkdir(save_path)
    except:
        pass
    if faces:
        draw = ImageDraw.Draw(im)
        count = 0
        for f in faces:
            count += 1
            draw.rectangle(f, outline=(255, 0, 0))
            a = im.crop(f)
            file_name = os.path.join(save_path,str(count)+".jpg")
     #       print file_name
            a.save(file_name)

        drow_save_path = os.path.join(save_path,"out.jpg")
        im.save(drow_save_path, "JPEG", quality=80)
    else:
        print "Error: cannot detect faces on %s" % infile

if __name__ == "__main__":
    process("kobe.jpg")
</code></pre>

<p>接下来只要运行python xx.py</p>

<p>过一会，如果图片内有人的话生成一个文件夹，里面有一张人脸的截图和一张人脸的标识图。</p>

<p>以下为示例：</p>

<p><img src="/images/face/1.jpg"></p>

<p><img src="/images/face/2.jpg"></p>

<p><img src="/images/face/3.jpg"></p>

<p>接下来用一下摄像头：</p>

<pre><code>sudo apt-get install fswebcam 
sudo fswebcam --device /dev/video0  a.jpg
</code></pre>

<p>在 process(&ldquo;kobe.jpg&rdquo;) 前面加一句:</p>

<pre><code>os.system("fswebcam --device /dev/video0 /home/pi/Desktop/kobe.jpg")
</code></pre>

<p>看一下效果：</p>

<p><img src="/images/face/4.jpg"></p>

<p><img src="/images/face/5.jpg"></p>

<p>光线不好还是能认出来，说明opencv自带的分类器算开源里面不错的了~</p>

<p>参考:<br/>
<a href="http://bbs.ickey.cn/group-topic-id-67165.html">Tigerboard开发板试用体验 python+opencv的人脸识别</a> <br/>
<a href="http://blog.csdn.net/u010873775/article/details/50615834">NanoPi2试用体验 简单人脸识别-结项</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 3 编译opencv]]></title>
    <link href="http://starsight.github.io/blog/2016/04/30/raspberry-opencv-install/"/>
    <updated>2016-04-30T10:18:51+08:00</updated>
    <id>http://starsight.github.io/blog/2016/04/30/raspberry-opencv-install</id>
    <content type="html"><![CDATA[<p>OpenCV的全称是：Open Source Computer Vision Library。OpenCV是一个基于（开源）发行的跨平台计算机视觉库，可以运行在Linux、Windows和Mac OS操作系统上。它轻量级而且高效——由一系列C函数和少量C++类构成，同时提供了Python、Ruby、MATLAB等语言的接口，实现了图像处理和计算机视觉方面的很多通用算法。</p>

<p>需要完成此次的项目，离不开opencv的支持，接下来我们就在树莓派上安装opencv。</p>

<!--more-->


<p>安装OpenCV的依赖包：</p>

<pre><code>sudo apt-get install libqt4-dev libvtk5-qt4-dev
</code></pre>

<p>接下来需要从OpenCV官方网站：<a href="http://opencv.org">http://opencv.org</a> 下载Linux版本的OpenCV的源代码：</p>

<p><img src="/images/opencv-install/1.jpg"></p>

<p>我选择Linux平台下的2.4.9版本的源码包，将压缩包解压到/usr/local目录下。</p>

<p>进入opencv-2.4.9目录，新建一个build目录：</p>

<pre><code>sudo mkdir build
</code></pre>

<p>先安装 cmake</p>

<pre><code>sudo apt-get install cmake
</code></pre>

<p>进入build目录，利用下面的cmake命令进行编译设置：</p>

<p>注意下python部分：</p>

<p><img src="/images/opencv-install/2.jpg"></p>

<pre><code>cmake -D CMAKE_BUILD_TYPE=RELEASE -D .. 
</code></pre>

<p>等待检测和设置完成,就可以开始编译了:</p>

<pre><code>sudo make
sudo make install
#更新搜索动态链接库
sudo ldconfig 
</code></pre>

<p><img src="/images/opencv-install/3.jpg"></p>

<p><img src="/images/opencv-install/4.jpg"></p>

<p>在python环境下执行</p>

<pre><code>import cv
</code></pre>

<p>没有报错则安装成功~</p>

<p>参考:<br/>
<a href="http://jjliu.blog.ustc.edu.cn/198/">GoBian安装OpenCV2.4.10</a> <br/>
<a href="http://blog.csdn.net/xukai871105/article/details/40988101">树莓派学习笔记—— 源代码方式安装opencv </a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 3 使用owncloud云服务]]></title>
    <link href="http://starsight.github.io/blog/2016/04/29/raspberry-owncloud/"/>
    <updated>2016-04-29T10:48:51+08:00</updated>
    <id>http://starsight.github.io/blog/2016/04/29/raspberry-owncloud</id>
    <content type="html"><![CDATA[<p>我们将要搭建自己的云系统平台，更精确的说是一个云存储系统，正如上面的产品所提供的功能。我们将使用开源软件ownCloud来搭建自己的私有云。ownCloud 起源于一个叫The KDE 云计算项目，现在已经适用于大多主流平台，它最早是KED的开发者Frank Karlitschek 创建的，现在由一个ownCloud team共同开发。</p>

<p>首先介绍一下ownCloud：
简单来说就是一个基于PHP的自建网盘。基本上是私人使用，没有用户注册功能，但是有用户添加功能，你可以无限制地添加用户，OwnCloud还提供了不少的免费应用，这些应用可以让你更好观看视频、倾听音乐等。</p>

<!--more-->


<p>ownCloud 内核是用PHP5写的，支持SQLite、MySQL、Oracle以及PostgreSQL等数据库。为了简单，我们将用MySQL数据库。在你的Linux系统下你需要安装以下软件：</p>

<p>PHP 安装包：php5, php5-gd, php-xml- parser,php5-intl<br/>
数据库驱动：php5-mysql（如果你使用其他数据库，需要安装相应的数据库以及驱动）<br/>
Curl 安装包：curl, libcurl3, php5-curl<br/>
SMB 客户端：smbclient （这个用来挂载Windows共享文件夹的）<br/>
Web 服务器：apache2</p>

<h4>一键安装：</h4>

<pre><code>sudo apt-get install apache2 php5 php5-gd php-xml-parser php5-intl php5-sqlite php5-mysql smbclient curl libcurl3 php5-curl mysql-server
</code></pre>

<p>从 <a href="https://owncloud.org/install/">https://owncloud.org/install/</a> 下载最新的ownCloud Server 对于本文，我们使用owncloud-9.0.1 版本</p>

<p><img src="/images/owncloud/1.jpg"></p>

<p>对于基于Debian发行版的Linux系统，web服务器的根目录为/var/www  我实际操作过程中似乎不可用，于是我就放在了html文件夹下。</p>

<pre><code>cd /var/www/html  #（网页目录）
tar jxf owncloud-9.0.1.tar.bz2 -C  /var/www/html   #(解压至web目录)
cd /var/www/html/owncloud    #（进入owncloud web目录）
mkdir data      #(建立数据库目录)
cd data
</code></pre>

<h4>OwnCloud在安装的过程中需要对一些目录有写的权限，为此，web服务器用户（www-data对于基于Debian的系统）必须要拥有apps、data、config目录的权限。运行以下命令完成：</h4>

<pre><code>#data 目录下
sudo chown -R www-data:www-data data 
sudo chown -R www-data:www-data config 
sudo chown -R www-data:www-data apps
</code></pre>

<p>还需要修改下配置文件：
（网上说法不一,有说是 /etc/apache2/sites-enabled/000-default.conf ，还有说 /etc/httpd/conf.d/owncloud.conf 不过我没找到此文件）
<code>
sudo vi /etc/apache2/apache2.conf
</code></p>

<p>修改如下：
<code>
&lt;Directory /var/www/&gt;
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
&lt;/Directory&gt;
</code></p>

<p>打开浏览器，输入<a href="http://IP/owncloud">http://IP/owncloud</a></p>

<p><img src="/images/owncloud/2.jpg"></p>

<p>电脑上装一下owncloud的客户端，然后操作比较简单</p>

<p>看我的同步效果：</p>

<p><img src="/images/owncloud/3.jpg"></p>

<p><img src="/images/owncloud/4.jpg"></p>

<p><img src="/images/owncloud/5.jpg"></p>

<p>这是局域网的访问，如果没公网ip，则可用ngrok内网转发来实现外网访问。</p>

<p>参考:<br/>
<a href="http://jjliu.blog.ustc.edu.cn/198/">使用OwnCloud创建私有云</a><br/>
<a href="https://alexlee.cn/%e6%a0%91%e8%8e%93%e6%b4%beraspberry-pi%e5%ae%89%e8%a3%85owncloud%e6%90%ad%e5%bb%ba%e7%a7%81%e6%9c%89%e4%ba%91%e6%9c%8d%e5%8a%a1%e5%99%a8/">树莓派Raspberry Pi安装ownCloud搭建私有云服务器</a><br/>
<a href="http://www.linuxidc.com/Linux/2013-08/89380.htm">Ubuntu 12.04下使用ownCloud搭建私人存储云</a><br/>
<a href="http://www.linuxidc.com/Linux/2014-03/98757.htm">CentOS 6.3搭建个人私有云存储ownCloud</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 3 Ngrok内网穿透]]></title>
    <link href="http://starsight.github.io/blog/2016/04/28/raspberry-ngrok/"/>
    <updated>2016-04-28T13:48:51+08:00</updated>
    <id>http://starsight.github.io/blog/2016/04/28/raspberry-ngrok</id>
    <content type="html"><![CDATA[<p>现在很多宽带服务都不分公网ip，那怎么让外网访问树莓派的服务呢？
ngrok 就可以实现外网访问树莓派，ngrok的具体介绍和实现就不说了，主要来看看怎么使用。</p>

<!--more-->


<p>我用的是国内的ngrok.cc 的服务。</p>

<p>去ngrok.cc 下载arm版本的客户端，解压。
修改 ngrok.cfg 文件</p>

<p>这里的token填写在 <a href="http://www.ngrok.cc/index.php/Member/index.html">Ngrok管理中心</a> 的token</p>

<p><img src="/images/ngrok/1.jpg"></p>

<p>我们需要在域名列表里面注册一下：</p>

<p><img src="/images/ngrok/2.jpg"></p>

<p>我这里用的是自己的域名，还需要在dns解析 加一条记录</p>

<p><img src="/images/ngrok/3.jpg"></p>

<p>不运行服务，直接输入域名，应该可以看到如下文字：</p>

<p><img src="/images/ngrok/4.jpg"></p>

<p>说明这部分没有问题了~</p>

<p>接下来启动服务：<br/>
<code>
 ./ngrok -config ngrok.cfg start test
</code></p>

<p>这样表示运行成功：</p>

<p><img src="/images/ngrok/5.jpg"></p>

<p>打开浏览器，刷新一下刚才的界面：</p>

<p><img src="/images/ngrok/6.jpg"></p>

<p>我们把上一次的owncloud也给加上
<code>
test.wenjiehe.com/owncloud
</code></p>

<p><img src="/images/ngrok/7.jpg"><br/>
可以照常使用~~</p>

<p>可能遇到 ####正在访问来自不信任域名的服务器,请联系你的系统管理员。如果你是系统管理员，配置config/config.php文件中参数&#8221;trusted_domain&#8221;
则修改下config.php
<code>
sudo vi /var/www/html/owncloud/config/config.php
</code></p>

<p><img src="/images/ngrok/8.jpg"></p>

<p>同时再提供下android版本的登录成功的截图：</p>

<p><img src="/images/ngrok/9.jpg"></p>

<p><img src="/images/ngrok/10.jpg"></p>

<p>如果没有自己的域名也可以使用ngrok.cc提供的二级域名。</p>

<p>参考:<br/>
<a href="http://ngrok.cc/">Sunny-Ngrok内网转发</a><br/>
<a href="https://www.chiphell.com/thread-1534193-1-1.html">&ldquo;正在访问来自不信任域名的服务器&#8221;的解决办法</a><br/>
<a href="https://www.zhihu.com/question/42433730">如何让树莓派可以被外网访问？</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi 3 发微博]]></title>
    <link href="http://starsight.github.io/blog/2016/04/24/raspberry-weibo/"/>
    <updated>2016-04-24T21:57:51+08:00</updated>
    <id>http://starsight.github.io/blog/2016/04/24/raspberry-weibo</id>
    <content type="html"><![CDATA[<p>本打算做个微博机器人，但是貌似微博把接口的权限改变了，不是很好弄，所以这里先做个半自动的。</p>

<p>首先去open.weibo.com 先建立自己的应用，你会得到一个 App Key App Secret ，除此以外我们需要在 应用信息-高级信息中，把授权回调页 写成<a href="https://api.weibo.com/oauth2/default.html">https://api.weibo.com/oauth2/default.html</a> 取消授权回调页 同样即可</p>

<!--more-->


<p><img src="/images/weibo/1.jpg"></p>

<pre><code>#coding=utf-8

#! /usr/bin/python
"""
引入Python SDK的包
"""
import weibo

"""
授权需要的三个信息，APP_KEY、APP_SECRET为创建应用时分配的，CALL_BACK在应用的设置网页中
设置的。【注意】这里授权时使用的CALL_BACK地址与应用中设置的CALL_BACK必须一致，否则会出
现redirect_uri_mismatch的错误。
"""
APP_KEY = '21523394XX'  
APP_SECRET = 'eb0da29dd163c64ec26dc6afc3b7XXXX'  
CALL_BACK = 'https://api.weibo.com/oauth2/default.html'

def run():  
#weibo模块的APIClient是进行授权、API操作的类，先定义一个该类对象，传入参数为APP_KEY, APP_SECRET, CALL_BACK
        client = weibo.APIClient(APP_KEY, APP_SECRET, CALL_BACK)  
#获取该应用（APP_KEY是唯一的）提供给用户进行授权的url
        auth_url = client.get_authorize_url()  
#打印出用户进行授权的url，将该url拷贝到浏览器中，服务器将会返回一个url，该url中包含一个code字段（如图1所示）
        print "auth_url : " + auth_url  
#输入该code值（如图2所示）
        code = raw_input("input the retured code : ")  
#通过该code获取access_token，r是返回的授权结果，具体参数参考官方文档：
# http://open.weibo.com/wiki/Oauth2/access_token
        r = client.request_access_token(code)  
#将access_token和expire_in设置到client对象
        client.set_access_token(r.access_token, r.expires_in)

#以上步骤就是授权的过程，现在的client就可以随意调用接口进行微博操作了，下面的代码就是用用户输入的内容发一条新微博

        while True:  
                print "Ready! Do you want to send a new weibo?(y/n)"  
                choice = raw_input()  
                if choice =='y' or choice =='Y':  
                        content = raw_input('input the your new weibo content : ')  
                        if content:  
#调用接口发一条新微薄，status参数就是微博内容
                                client.statuses.update.post(status=content)  
                                print "Send succesfully!"  
                                break;  
                        else:  
                                print "Error! Empty content!"  
                if choice =='n' or choice =='N':  
                        break

if __name__ == "__main__":  
        run()       
</code></pre>

<p>weibo 这个库来自于 廖雪峰-Python微博SDK <a href="http://github.liaoxuefeng.com/sinaweibopy/">http://github.liaoxuefeng.com/sinaweibopy/</a></p>

<p>运行之后会让你登录：</p>

<p><img src="/images/weibo/2.jpg"></p>

<p>我们复制控制台显示出来的链接，粘贴到浏览器去获得code：</p>

<p><img src="/images/weibo/3.jpg"></p>

<p>如果第一次登微博，就需要输一下帐号，密码，我的之前已经登陆过了。</p>

<p>看地址栏最后有一串字符：</p>

<p><img src="/images/weibo/4.jpg"></p>

<p>然后会问你要不要发微博，我们来发一条：</p>

<p><img src="/images/weibo/5.jpg"></p>

<p>去微博看一看：</p>

<p><img src="/images/weibo/6.jpg"></p>

<p>在之前，微博api是可以自己获得code，不需要手动到浏览器去粘贴获得，但是现在好像不可以了（但是还是有途径的），下一次再试试能不能自动登录。</p>
]]></content>
  </entry>
  
</feed>
